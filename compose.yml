networks:
  open-cti-network:
    external: true

services:
  postgres:
    extends:
      file: ../crh-database/compose.yml
      service: postgres
    restart: no
    ports:
      - "${POSTGRES_PORT}:5432" 
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${POSTGRES_PORT}"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 5s
    networks:
      - open-cti-network


  mongo:
    extends:
      file: ../crh-database/compose.yml
      service: mongo
    restart: no
    ports:
      - "${MONGO_PORT}:27017"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MONGO_PORT}"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 5s
    networks:
      - open-cti-network

      
  cyber-report-hub-site:
    build: ../crh-CyberReportHub-Site
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    restart: no
    depends_on:
      - rest-api
    
  feature-extractor:
    build: ../crh-feature-extractor
    restart: no
    depends_on:
      - postgres
      - mongo
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
    networks:
      - open-cti-network
  
  rss-feed-source-task:
    build: ../crh-rss-feed-source
    restart: no
    depends_on:
      - postgres
      - mongo
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      OPEN_CTI_PRIVATE_KEY: ${OPEN_CTI_PRIVATE_KEY}

    networks:
      - open-cti-network
  
  web-scraping:
    build: ../crh-web-scraping
    restart: no
    depends_on:
      - postgres
      - mongo
    environment:
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_COLLECTION: ${MONGO_COLLECTION}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
    networks:
      - open-cti-network

  rest-api:
    build: ../crh-rest-api
    restart: no
    ports:
      - "${REST_API_PORT}:${REST_API_PORT}"
    depends_on:
      - postgres
      - mongo
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      REST_API_PORT: ${REST_API_PORT}
      ENABLE_SPRING_DOCS: ${ENABLE_SPRING_DOCS}
      ALLOWED_ORIGINS_PATTERNS: ${ALLOWED_ORIGINS_PATTERNS}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${REST_API_PORT}"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 5s
    networks:
      - open-cti-network
      
  report-generator:
    build: ../crh-report-generator
    restart: no
    depends_on:
      - postgres
      - mongo
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - open-cti-network
  
  enrichment-api:
    build: ../crh-enrichment-api
    container_name: enrichment-api
    restart: no
    ports:
      - "${ENRICHMENT_PORT}:${ENRICHMENT_PORT}"
    depends_on:
      - postgres
      - mongo
    environment:
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      MONGO_COLLECTION: ${MONGO_COLLECTION}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_ML_COLLECTION: ${MONGO_ML_COLLECTION}
      ENRICHMENT_PORT: ${ENRICHMENT_PORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${ENRICHMENT_PORT}"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 5s
    networks:
      - open-cti-network

  article-enricher:
    build: ../crh-article-enricher
    container_name: article-enricher
    restart: no
    depends_on:
      - postgres
      - mongo
    environment:
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB_NAME: ${POSTGRES_DB_NAME}
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGO_HOST: ${MONGO_HOST}
      MONGO_PORT: ${MONGO_PORT}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_DB_NAME: ${MONGO_DB_NAME}
      ARTICLE_ENRICHER_HOST: ${ARTICLE_ENRICHER_HOST}
    networks:
      - open-cti-network

  email-service:
    build: ../crh-email-service      
    container_name: crh-email-service
    restart: no
    ports:
      - "5000:5000"                  # API endpoint (POST /send-email)
    environment:
      SMTP_HOST: mailhog             # for dev/test
      SMTP_PORT: "1025"
      SMTP_FROM: reports@example.com
      USE_STARTTLS: "false"
      APP_PORT: 5000
    depends_on:
      - mailhog
    networks:
      - open-cti-network

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    restart: no
    ports:
      - "1025:1025"   # SMTP port
      - "8025:8025"   # Web UI for viewing test emails
    networks:
      - open-cti-network


# uncomment this once we are able to run open cti from this main docker file, for now, make sure to run the open cti repo using docker 
# compose using the specified repo before starting this project

#   open-cti-integration:
#     networks:
#       - open-cti-network
#     extends:
#       file: ../crh-open-cti-integration/docker-compose.yml
#       service: opencti
#     depends_on:
#      - redis
#      - rabbitmq
#      - elasticsearch
#      - minio
#     container_name: open-cti-integration
#     restart: no
  
#   redis:
#     image: redis:7.4.1
#     networks:
#       - open-cti-network
#     restart: always
#     volumes:
#       - redisdata:/data
#     healthcheck:
#       test: ["CMD", "redis-cli", "ping"]
#       interval: 10s
#       timeout: 5s
#       retries: 3 

#   rabbitmq:
#     image: rabbitmq:4.0-management
#     networks:
#       - open-cti-network
#     environment:
#       - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
#       - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
#       - RABBITMQ_NODENAME=rabbit01@localhost
#     volumes:
#       - amqpdata:/var/lib/rabbitmq
#     restart: always
#     healthcheck:
#       test: rabbitmq-diagnostics -q ping
#       interval: 30s
#       timeout: 30s
#       retries: 3

#   elasticsearch:
#     image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
#     networks:
#       - open-cti-network
#     volumes:
#       - esdata:/usr/share/elasticsearch/data
#     environment:
#       # Comment-out the line below for a cluster of multiple nodes
#       - discovery.type=single-node
#       # Uncomment the line below below for a cluster of multiple nodes
#       # - cluster.name=docker-cluster
#       - xpack.ml.enabled=false
#       - xpack.security.enabled=false
#       - thread_pool.search.queue_size=5000
#       - logger.org.elasticsearch.discovery="ERROR"
#       - "ES_JAVA_OPTS=-Xms${ELASTIC_MEMORY_SIZE} -Xmx${ELASTIC_MEMORY_SIZE}"
#     restart: always
#     ulimits:
#       memlock:
#         soft: -1
#         hard: -1
#       nofile:
#         soft: 65536
#         hard: 65536
#     healthcheck:
#       test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
#       interval: 30s
#       timeout: 10s
#       retries: 50


#   minio:
#     image: minio/minio:RELEASE.2024-05-28T17-19-04Z # Use "minio/minio:RELEASE.2024-05-28T17-19-04Z-cpuv1" to troubleshoot compatibility issues with CPU
#     networks:
#       - open-cti-network
#     volumes:
#       - s3data:/data
#     ports:
#       - "9000:9000"
#     environment:
#       MINIO_ROOT_USER: ${MINIO_ROOT_USER}
#       MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}    
#     command: server /data
#     restart: always
#     healthcheck:
#       test: ["CMD", "mc", "ready", "local"]
#       interval: 10s
#       timeout: 5s
#       retries: 3

# volumes:
#   esdata:
#   s3data:
#   redisdata:
#   amqpdata:


  
  